rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ðŸ”¹ Helper Functions
    function isAdmin(clubId) {
      let clubDoc = get(/databases/$(database)/documents/clubs/$(clubId)).data;
      return clubDoc.adminEmails != null &&
             clubDoc.adminEmails is list &&
             request.auth.token.email in clubDoc.adminEmails;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isServiceAccount() {
      return request.auth.token.email.matches('.*@.*\\.gserviceaccount\\.com');
    }

    // ðŸ”¹ Admin Logs Collection - Only super admins can read, only Cloud Functions can write
    match /admin_logs/{logId} {
      allow read: if true;
      allow write: if isServiceAccount(); // Allow Cloud Functions service account to write
    }

    // ðŸ”¹ Users Collection
    match /users/{userId} {
      allow read, write: if isUserOwner(userId);
    }

    // ðŸ”¹ Clubs Collection
    match /clubs/{clubId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // ðŸ”¹ Events Collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // ðŸ”¹ Announcements Collection
    match /announcements/{clubId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // ðŸ”¹ Map Markers Collection
    match /mapMarkers/{markerId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // ðŸ”¹ Notifications Collection
    match /notifications/{notificationId} {
      // Allow read access to any authenticated user for now to debug
      allow read: if isAuthenticated();
      // Original rules - uncomment after debugging
      // allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // ðŸ”¹ Deny access to any other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}